pre {
	var metamodelName = metamodel!EPackage.all.first.name.println();
	var packageName = "org.eclipse.glsp.example.javaemf";
	var metamodelPackageName = "org.eclipse.glsp.example.tasklist.model";
	var metamodelElements = metamodel!EClassifier.all.select(c|not c.abstract).collect(c|c.name).println();
	var root = metamodelSpecificSettings!t_root.all.first.a_name.println();
	var nodes = metamodelSpecificSettings!t_node.all.collect(n|n.a_name).println();
	var edges = metamodelSpecificSettings!t_edge.all.collect(n|n.a_name).println();
	var components = source!ComponentModel.all.first.components.collect(c|c.eClass().getName()).println();
}

rule ServerLauncher
	transform serverLauncher : source!ServerLauncher {
	
	parameters : Map {
		"_metamodelName" = metamodelName,
		"_packageName" = packageName
	}
	
	template : "template-serverLauncher.egl"

	target : "../src-gen/glsp/server/launch/" + metamodelName.firstToUpperCase() + "ServerLauncher.java"
	
}


rule DiagramModule
	transform diagramModule : source!DiagramModule {
	
	parameters : Map {
		"_metamodelName" = metamodelName,
		"_packageName" = packageName,
		"_nodes" = nodes,
		"_edges" = edges,
		"_components" = components
	}
	
	template : "template-diagramModule.egl"

	target : "../src-gen/glsp/server/" + metamodelName.firstToUpperCase() + "DiagramModule.java"
	
}


rule DiagramConfiguration
	transform diagramConfiguration : source!DiagramConfiguration {
	
	parameters : Map {
		"_metamodelName" = metamodelName,
		"_packageName" = packageName,
		"_nodes" = nodes,
		"_edges" = edges
	}
	
	template : "template-diagramConfiguration.egl"

	target : "../src-gen/glsp/server/" + metamodelName.firstToUpperCase() + "DiagramConfiguration.java"
	
}


rule ModelTypes
	transform modelTypes : source!ModelTypes {
	
	parameters : Map {
		"_metamodelName" = metamodelName,
		"_packageName" = packageName,
		"_nodes" = nodes,
		"_edges" = edges
	}
	
	template : "template-modelTypes.egl"

	target : "../src-gen/glsp/server/" + metamodelName.firstToUpperCase() + "ModelTypes.java"
	
}


rule CreateHandler
	transform createHandler : source!CreateHandler {
	
	parameters : Map {
		"_metamodelName" = metamodelName,
		"_packageName" = packageName,
		"_metamodelPackageName" = metamodelPackageName,
		"_root" = root,
		"_nodes" = nodes,
		"_edges" = edges
	}
	
	template : "template-createHandler.egl"

	target : "../src-gen/glsp/server/handler/Create" + createHandler.elementName + "NodeHandler.java"
	
}


rule DeleteHandler
	transform deleteHandler : source!DeleteHandler {
	
	parameters : Map {
		"_packageName" = packageName
	}
	
	template : "template-deleteHandler.egl"

	target : "../src-gen/glsp/server/handler/DeleteNodeHandler.java"
	
}


rule ToolPaletteItemProvider
	transform toolPaletteItemProvider : source!ToolPaletteItemProvider {
	
	parameters : Map {
		"_metamodelName" = metamodelName,
		"_packageName" = packageName,
		"_nodes" = nodes,
		"_edges" = edges
	}
	
	template : "template-toolPaletteItemProvider.egl"

	target : "../src-gen/glsp/server/palette/" + metamodelName.firstToUpperCase() + "ToolPaletteItemProvider.java"
	
}


rule EMFSourceModelStorage
	transform emfSourceModelStorage : source!EMFSourceModelStorage {
	
	parameters : Map {
		"_metamodelName" = metamodelName,
		"_packageName" = packageName,
		"_metamodelPackageName" = metamodelPackageName
	}
	
	template : "template-emfSourceModelStorage.egl"

	target : "../src-gen/glsp/server/model/" + metamodelName.firstToUpperCase() + "SourceModelStorage.java"
	
}


rule GModelFactory
	transform gModelFactory : source!GModelFactory {
	
	parameters : Map {
		"_metamodelName" = metamodelName,
		"_packageName" = packageName,
		"_metamodelPackageName" = metamodelPackageName,
		"_root" = root,
		"_nodes" = nodes,
		"_edges" = edges
	}
	
	template : "template-gModelFactory.egl"

	target : "../src-gen/glsp/server/model/" + metamodelName.firstToUpperCase() + "GModelFactory.java"
	
}