pre {
	var metamodelName = source!t_feature.all.select(f|f.a_name.startsWith("S1 Metamodel Extension_")).first.a_name.replace("S1 Metamodel Extension_", "").println();
}

rule Root
	transform s : source!t_configuration
	to t : target!ComponentModel {
		
		//"configuration".println();
		
		/*for (feature in s.children) {
			//if (feature.a_name == "S") {
			if (feature.equivalent() != null) {
				//t.components.addAll(feature.equivalents());
				t.components.add(feature.equivalent());
			}
		}*/
		
		//t.components.addAll(s.children.equivalents());
		
		//s.children.first().equivalents().getClass().println();
	
}


//@lazy
rule MinimumComponents
	transform s : source!t_feature
	to t1 : target!ServerLauncher,
	t2 : target!DiagramModule,
	t3 : target!DiagramConfiguration {
	
		guard : s.a_name == "S"
		
		"ServerLauncher".println();
		"DiagramModule".println();
		"DiagramConfiguration".println();
		
		t1.metamodelName = metamodelName;
		
		var root = target!ComponentModel.all.first;
		root.components.add(t1);
		root.components.add(t2);
		root.components.add(t3);
	
}


//@lazy
rule ModelTypes
	transform s : source!t_feature
	to t : target!ModelTypes {
	
		guard : s.a_name == "S121 DefaultTypes"
		
		"ModelTypes".println();
		
		target!ComponentModel.all.first.components.add(t);
	
}


@lazy
rule CreateHandler
	transform s : source!t_feature
	to t : target!CreateHandler {
	
		guard : s.a_name.startsWith("E_S31 use Command_")
		
		("CreateHandler_" + s.a_name.substring("E_S31 use Command_".length(), s.a_name.length())).println();
		
		t.elementName = s.a_name.substring("E_S31 use Command_".length(), s.a_name.length());
	
}


@lazy
rule DeleteHandler
	transform s : source!t_feature
	to t : target!DeleteHandler {
	
		guard : s.a_name == "S4 Element Deletion"
		
		"DeleteHandler".println();
		

	
}


@lazy
rule ToolPaletteItemProvider
	transform s : source!t_feature
	to t : target!ToolPaletteItemProvider {
	
		guard : s.a_name == "S83 Tool Palette"
		
		"ToolPaletteItemProvider".println();
		

	
}


//@lazy
rule EMFSourceModelStorage
	transform s : source!t_feature
	to t : target!EMFSourceModelStorage {
	
		guard : s.a_name == "S1111 EMFNotationSourceModelStorage"
		
		"EMFSourceModelStorage".println();
		
		t.metamodelName = metamodelName;
		
		target!ComponentModel.all.first.components.add(t);
	
}


//@lazy
rule GModelFactory
	transform s : source!t_feature
	to t : target!GModelFactory {
	
		guard : s.a_name == "S131 transform SourceModel"
		
		"GModelFactory".println();
		
		t.metamodelName = metamodelName;
		
		target!ComponentModel.all.first.components.add(t);
	
}