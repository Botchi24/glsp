[%import "../../attribute_resolver.eol";%]
[%import "../../metamodel_utils.eol";%]
/********************************************************************************
 * Copyright (c) 2022 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied:
 * -- GNU General Public License, version 2 with the GNU Classpath Exception
 * which is available at https://www.gnu.org/software/classpath/license.html
 * -- MIT License which is available at https://opensource.org/license/mit.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR MIT
 ********************************************************************************/
package [%=_packageName%].model;

import java.util.Map;

import org.eclipse.emf.ecore.EObject;
import [%=_packageName%].[%=_metamodelName.firstToUpperCase()%]ModelTypes;
[%for ( n in _nodes){%]
import [%=_metamodelPackageName%].[%=_metamodelPrefix.toLowerCase()%].[%=n%];
[%}%]
[%for ( e in _edges){%]
import [%=_metamodelPackageName%].[%=_metamodelPrefix.toLowerCase()%].[%=e%];
[%}%]
import [%=_metamodelPackageName%].[%=_metamodelPrefix.toLowerCase()%].[%=_root%];
import org.eclipse.glsp.graph.DefaultTypes;
import org.eclipse.glsp.graph.GGraph;
import org.eclipse.glsp.graph.GModelRoot;
import org.eclipse.glsp.graph.GNode;
import org.eclipse.glsp.graph.GEdge;
import org.eclipse.glsp.graph.builder.impl.GLabelBuilder;
import org.eclipse.glsp.graph.builder.impl.GLayoutOptions;
import org.eclipse.glsp.graph.builder.impl.GNodeBuilder;
import org.eclipse.glsp.graph.builder.impl.GEdgeBuilder;
import org.eclipse.glsp.graph.util.GConstants;
import org.eclipse.glsp.server.emf.model.notation.Diagram;
import org.eclipse.glsp.server.emf.notation.EMFNotationGModelFactory;

public class [%=_metamodelName.firstToUpperCase()%]GModelFactory extends EMFNotationGModelFactory {

   @Override
   protected void fillRootElement(final EObject semanticModel, final Diagram notationModel, final GModelRoot newRoot) {
      [%=_root%] [%=_root.firstToLowerCase()%] = [%=_root%].class.cast(semanticModel);
      GGraph graph = GGraph.class.cast(newRoot);
      //if (notationModel.getSemanticElement() != null
         //&& notationModel.getSemanticElement().getResolvedSemanticElement() != null) {
         [%for ( n in _nodes){%]
         [%=_root.firstToLowerCase()%].get[%=getReferenceName(n, _root).firstToUpperCase()%]().stream()
            .map(this::create[%=n%]Node)
            .forEachOrdered(graph.getChildren()::add);
         [%}%]
         [%for ( e in _edges){%]
         [%=_root.firstToLowerCase()%].get[%=getReferenceName(e, _root).firstToUpperCase()%]().stream()
            .map(this::create[%=e%]Edge)
            .forEachOrdered(graph.getChildren()::add);
         [%}%]
      //}
   }

   [%for ( n in _nodes){%]
   protected GNode create[%=n%]Node(final [%=n%] [%=n.firstToLowerCase()%]) {
      GNodeBuilder [%=n.firstToLowerCase()%]NodeBuilder = new GNodeBuilder([%=_metamodelName.firstToUpperCase()%]ModelTypes.[%=n.toUpperCase()%])
         .id(idGenerator.getOrCreateId([%=n.firstToLowerCase()%]))
         .addCssClass("[%=_metamodelName%]-node")
         .add(new GLabelBuilder(DefaultTypes.LABEL).text(idGenerator.getOrCreateId([%=n.firstToLowerCase()%])).id(idGenerator.getOrCreateId([%=n.firstToLowerCase()%]) + "_label").build())
         .layout([%=getStyleValue(n, "layout")%], Map.of(GLayoutOptions.KEY_PADDING_LEFT, 5));

      applyShapeData([%=n.firstToLowerCase()%], [%=n.firstToLowerCase()%]NodeBuilder);
      return [%=n.firstToLowerCase()%]NodeBuilder.build();
   }
   
   [%}%]
   
   [%for ( e in _edges){%]
   protected GEdge create[%=e%]Edge(final [%=e%] [%=e.firstToLowerCase()%]) {
      GEdgeBuilder [%=e.firstToLowerCase()%]EdgeBuilder = new GEdgeBuilder([%=_metamodelName.firstToUpperCase()%]ModelTypes.[%=e.toUpperCase()%])
          .id(idGenerator.getOrCreateId([%=e.firstToLowerCase()%]))
          .addCssClass("[%=_metamodelName%]-edge")
          .sourceId(idGenerator.getOrCreateId([%=e.firstToLowerCase()%].getFrom()))
          .targetId(idGenerator.getOrCreateId([%=e.firstToLowerCase()%].getTo()));
          
      applyEdgeData([%=e.firstToLowerCase()%], [%=e.firstToLowerCase()%]EdgeBuilder);
      return [%=e.firstToLowerCase()%]EdgeBuilder.build();
   }
   
   [%}%]

}