/********************************************************************************
 * Copyright (c) 2022 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied:
 * -- GNU General Public License, version 2 with the GNU Classpath Exception
 * which is available at https://www.gnu.org/software/classpath/license.html
 * -- MIT License which is available at https://opensource.org/license/mit.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR MIT
 ********************************************************************************/
package [%=_packageName%];

[%for ( n in _nodes){%]
import [%=_packageName%].handler.Create[%=n%]NodeHandler;
[%}%]
[%for ( e in _edges){%]
import [%=_packageName%].handler.Create[%=e%]EdgeHandler;
[%}%]
import [%=_packageName%].handler.DeleteHandler;
import [%=_packageName%].handler.ChangeRoutingPointsOperationHandler;
import [%=_packageName%].labeledit.LabelEditOperationHandler;
import [%=_packageName%].model.[%=_metamodelName.firstToUpperCase()%]GModelFactory;
import [%=_packageName%].model.[%=_metamodelName.firstToUpperCase()%]SourceModelStorage;
import [%=_packageName%].palette.[%=_metamodelName.firstToUpperCase()%]ToolPaletteItemProvider;
import org.eclipse.glsp.server.di.MultiBinding;
import org.eclipse.glsp.server.diagram.DiagramConfiguration;
import org.eclipse.glsp.server.emf.EMFIdGenerator;
import org.eclipse.glsp.server.emf.EMFSourceModelStorage;
import org.eclipse.glsp.server.emf.notation.EMFNotationDiagramModule;
import org.eclipse.glsp.server.features.core.model.GModelFactory;
import org.eclipse.glsp.server.features.toolpalette.ToolPaletteItemProvider;
import org.eclipse.glsp.server.operations.OperationHandler;

public class [%=_metamodelName.firstToUpperCase()%]DiagramModule extends EMFNotationDiagramModule {

   [%if (_components.contains("DiagramConfiguration")) {%]
   @Override
   protected Class<? extends DiagramConfiguration> bindDiagramConfiguration() {
      // define what operations are allowed with our elements
      return [%=_metamodelName.firstToUpperCase()%]DiagramConfiguration.class;
   }
   [%}%]

   [%if (_components.contains("EMFSourceModelStorage")) {%]
   @Override
   protected Class<? extends EMFSourceModelStorage> bindSourceModelStorage() {
      // ensure our custom package is registered when loading our models
      return [%=_metamodelName.firstToUpperCase()%]SourceModelStorage.class;
   }
   [%}%]

   [%if (_components.contains("GModelFactory")) {%]
   @Override
   public Class<? extends GModelFactory> bindGModelFactory() {
      // custom factory to convert tasks into nodes
      return [%=_metamodelName.firstToUpperCase()%]GModelFactory.class;
   }
   [%}%]

   [%if (_components.contains("EMFSourceModelStorage")) {%]
   @Override
   protected Class<? extends EMFIdGenerator> bindEMFIdGenerator() {
      // all our elements inherit from Identifiable and have an ID attribute set
      return [%=_metamodelName.firstToUpperCase()%]IdGenerator.class; //FragmentIdGenerator.class;
   }
   [%}%]

   [%if (_components.contains("ToolPaletteItemProvider")) {%]
   @Override
   protected Class<? extends ToolPaletteItemProvider> bindToolPaletteItemProvider() {
      return [%=_metamodelName.firstToUpperCase()%]ToolPaletteItemProvider.class;
   }
   [%}%]

   //@Override
   //protected Class<? extends LabelEditValidator> bindLabelEditValidator() {
   //   return StatemachineLabelEditValidator.class;
   //}

   @Override
   protected void configureOperationHandlers(final MultiBinding<OperationHandler<?>> binding) {
      super.configureOperationHandlers(binding);
      binding.add(ChangeRoutingPointsOperationHandler.class);
      [%for ( n in _nodes){%]
      binding.add(Create[%=n%]NodeHandler.class);
      [%}%]
      [%for ( e in _edges){%]
      binding.add(Create[%=e%]EdgeHandler.class);
      [%}%]
      [%if (_components.contains("DeleteHandler")) {%]
      binding.add(DeleteHandler.class);
      [%}%]
      binding.add(LabelEditOperationHandler.class);
   }

   @Override
   public String getDiagramType() { return "[%=_metamodelName%]-diagram"; }

}