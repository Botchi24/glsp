operation resolvedId(elementName : String) : String {
	var result = "";
	
	var viewpointElement = viewpointModel!ViewpointModel.all.first.modelelement.selectOne(e|e.name.matches(elementName));
	
	for (part in viewpointElement.id.part) {
		switch (part.eClass.getName()) {
			case "Container" : result += resolvedId(container.name);
			case "Reference" : result += resolveNamingReference(part);
			case "Static"    : result += "\"" + part.value + "\"";
			case "Order"     : result += generateOrder(elementName);
			default			 : throw "The TET config file includes a part type that is not supported: config/" + elementName +"/element(type=+'" + self.eClass.getName() + "')/part(type='" + part.a_type + "')";
		}
		result += " + ";
	}
	
	while (result.endsWith(" + ")) {
		result = result.substring(0, result.length() - 3);
	}
	
	return result;
}

operation resolveNamingReference(part : viewpointModel!Part) : String {
	var result = "";
	var reference = part.value;
	var getter = "";
	
	while (reference.contains(".")) {
		getter += ".get" + reference.substring(0, reference.indexOf(".")).firstToUpperCase() + "()";
		reference = reference.substring(reference.indexOf(".") + 1, reference.length());
	}
	
	result = "((" + part.eContainer().eContainer().name + ")element)"
					+ getter
					//+ ".eGet("
					//+ "((" + part.eContainer().eContainer().name + ")element)"
					//+ getter
					//+ ".eClass().getEStructuralFeature(\"" + reference + "\")).toString()";
					+ ".get" + reference.firstToUpperCase() + "()";
	
	return result;
}

operation generateOrder(elementName : String) : String {
	return "modelState.getSemanticModel().eContents().stream().filter(obj -> obj instanceof " + elementName + ").collect(Collectors.toList()).indexOf(element)";
}

operation isStorable(elementName : String) : Boolean {
	return getIdAttributeRecursive(elementName).isDefined();
}

// search for iD="true"
operation getIdAttributeRecursive(elementName: String) : String {
	var classifier = metamodel!EClassifier.all.selectOne(c|c.name.matches(elementName));
	var id = classifier.eStructuralFeatures.selectOne(f|f.iD.equals(true));
	var idAttribute;
	
	if (id.isDefined()) idAttribute = id.name;
	if (idAttribute.isDefined()) return idAttribute;
	
	for (s in classifier.eSuperTypes) {
		idAttribute = getIdAttributeRecursive(s.name);
		if(idAttribute.isDefined()) return idAttribute;
	}
	
	return null;
}

operation getStyleValue(elementName : String, styleName : String) : String {
	var style = viewpointModel!ModelElement.all.selectOne(e|e.name.matches(elementName)).style; 
	if (style.isUndefined()) return "";
	var value = style.styleelement.selectOne(s|s.name.matches(styleName)).value;
	if (value.isUndefined()) return "";
	return value;
}

// emf attribute from emf package serving as id
operation getEmfIdAttribute(elementName: String) : String {
	var viewpointElement = viewpointModel!ViewpointModel.all.first.modelelement.selectOne(e|e.name.matches(elementName));
	return viewpointElement.id.emfIdAttribute;
}

// id attribute of root element
operation getRootId() : String {
	var viewpointElement = viewpointModel!ViewpointModel.all.first.modelelement.selectOne(e|e.type.name.matches('Root'));
	return viewpointElement.id.part.first.value;
}