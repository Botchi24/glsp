pre {

}


rule Root
	transform s : glspFeatureTreeConfiguration!t_configuration
	to t : componentModel_store!ComponentModel {
		
		//componentModel_store.root = t;
		t.components.add(new componentModel_store!ProjectComponent());
	
}


rule MinimumComponents
	transform s : glspFeatureTreeConfiguration!t_feature
	to t1 : componentModel_store!ServerLauncher,
	t2 : componentModel_store!DiagramModule,
	t3 : componentModel_store!DiagramConfiguration,
	t4 : componentModel_store!IdGenerator {
	
		guard : s.a_name == "S"
		
		"ServerLauncher".println();
		"DiagramModule".println();
		"DiagramConfiguration".println();
		"IdGenerator".println();
		
		var root = componentModel_store!ComponentModel.all.first;
		root.components.add(t1);
		root.components.add(t2);
		root.components.add(t3);
		root.components.add(t4);
}


rule ModelTypes
	transform s : glspFeatureTreeConfiguration!t_feature
	to t : componentModel_store!ModelTypes {
	
		guard : s.a_name == "S121 DefaultTypes"
		
		"ModelTypes".println();
		
		componentModel_store!ComponentModel.all.first.components.add(t);
	
}


rule CreateNodeHandler
	transform s : glspFeatureTreeConfiguration!t_feature
	to t : componentModel_store!CreateNodeHandler {
	
		guard : s.a_name.startsWith("N_S31 use Command_")
		
		("CreateNodeHandler_" + s.a_name.substring("N_S31 use Command_".length(), s.a_name.length())).println();
		
		t.elementName = s.a_name.substring("N_S31 use Command_".length(), s.a_name.length());
		
		componentModel_store!ComponentModel.all.first.components.add(t);
	
}


rule CreateEdgeHandler
	transform s : glspFeatureTreeConfiguration!t_feature
	to t : componentModel_store!CreateEdgeHandler {
	
		guard : s.a_name.startsWith("E_S31 use Command_")
		
		("CreateEdgeHandler_" + s.a_name.substring("E_S31 use Command_".length(), s.a_name.length())).println();
		
		t.elementName = s.a_name.substring("E_S31 use Command_".length(), s.a_name.length());

		componentModel_store!ComponentModel.all.first.components.add(t);
	
}


rule DeleteHandler
	transform s : glspFeatureTreeConfiguration!t_feature
	to t : componentModel_store!DeleteHandler {
	
		guard : s.a_name == "S4 Element Deletion"
		
		"DeleteHandler".println();
		
		componentModel_store!ComponentModel.all.first.components.add(t);
	
}


rule ToolPaletteItemProvider
	transform s : glspFeatureTreeConfiguration!t_feature
	to t : componentModel_store!ToolPaletteItemProvider {
	
		guard : s.a_name == "S83 Tool Palette"
		
		"ToolPaletteItemProvider".println();
		
		componentModel_store!ComponentModel.all.first.components.add(t);
	
}


rule EMFSourceModelStorage
	transform s : glspFeatureTreeConfiguration!t_feature
	to t : componentModel_store!EMFSourceModelStorage {
	
		guard : s.a_name == "S1111 EMFNotationSourceModelStorage"
		
		"EMFSourceModelStorage".println();
		
		componentModel_store!ComponentModel.all.first.components.add(t);
	
}


rule GModelFactory
	transform s : glspFeatureTreeConfiguration!t_feature
	to t : componentModel_store!GModelFactory {
	
		guard : s.a_name == "S131 transform SourceModel"
		
		"GModelFactory".println();
		
		componentModel_store!ComponentModel.all.first.components.add(t);
	
}


//------CLIENT-------


rule ClientModelTypes
	transform s : glspFeatureTreeConfiguration!t_feature
	to t : componentModel_store!ClientModelTypes {
	
		guard : s.a_name == "C121 Definition"
		
		"ClientModelTypes".println();
		
		componentModel_store!ComponentModel.all.first.components.add(t);
	
}