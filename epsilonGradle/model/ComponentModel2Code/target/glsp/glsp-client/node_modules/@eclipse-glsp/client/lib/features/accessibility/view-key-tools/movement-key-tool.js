"use strict";
/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var MovementKeyTool_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MoveKeyListener = exports.MovementKeyTool = void 0;
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const keyboard_1 = require("sprotty/lib/utils/keyboard");
const action_dispatcher_1 = require("../../../base/action-dispatcher");
const selection_service_1 = require("../../../base/selection-service");
const change_bounds_manager_1 = require("../../tools/change-bounds/change-bounds-manager");
const accessible_key_shortcut_1 = require("../key-shortcut/accessible-key-shortcut");
const move_handler_1 = require("../move-zoom/move-handler");
/**
 * Moves viewport and elements when its focused and arrow keys are hit.
 */
let MovementKeyTool = MovementKeyTool_1 = class MovementKeyTool {
    constructor() {
        this.isEditTool = true;
    }
    get id() {
        return MovementKeyTool_1.ID;
    }
    enable() {
        if (!this.movementKeyListener) {
            this.movementKeyListener = new MoveKeyListener(this, this.grid);
        }
        this.keytool.register(this.movementKeyListener);
        this.movementKeyListener.registerShortcutKey();
    }
    disable() {
        this.keytool.deregister(this.movementKeyListener);
    }
};
exports.MovementKeyTool = MovementKeyTool;
MovementKeyTool.ID = 'glsp.movement-key-tool';
__decorate([
    (0, inversify_1.inject)(sprotty_1.KeyTool),
    __metadata("design:type", sprotty_1.KeyTool)
], MovementKeyTool.prototype, "keytool", void 0);
__decorate([
    (0, inversify_1.inject)(selection_service_1.SelectionService),
    __metadata("design:type", selection_service_1.SelectionService)
], MovementKeyTool.prototype, "selectionService", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ISnapper),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], MovementKeyTool.prototype, "snapper", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", action_dispatcher_1.GLSPActionDispatcher)
], MovementKeyTool.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.Grid),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], MovementKeyTool.prototype, "grid", void 0);
__decorate([
    (0, inversify_1.inject)(change_bounds_manager_1.ChangeBoundsManager),
    __metadata("design:type", change_bounds_manager_1.ChangeBoundsManager)
], MovementKeyTool.prototype, "changeBoundsManager", void 0);
exports.MovementKeyTool = MovementKeyTool = MovementKeyTool_1 = __decorate([
    (0, inversify_1.injectable)()
], MovementKeyTool);
class MoveKeyListener extends sprotty_1.KeyListener {
    constructor(tool, grid = { x: MoveKeyListener.defaultMoveX, y: MoveKeyListener.defaultMoveY }) {
        super();
        this.tool = tool;
        this.grid = grid;
        this.token = MoveKeyListener.name;
    }
    registerShortcutKey() {
        this.tool.actionDispatcher.dispatchOnceModelInitialized(accessible_key_shortcut_1.SetAccessibleKeyShortcutAction.create({
            token: this.token,
            keys: [{ shortcuts: ['⬅  ⬆  ➡  ⬇'], description: 'Move element or viewport', group: 'Move', position: 0 }]
        }));
    }
    keyDown(_element, event) {
        const selectedElementIds = this.tool.selectionService.getSelectedElementIDs();
        const snap = this.tool.changeBoundsManager.usePositionSnap(event);
        const offsetX = snap ? this.grid.x : 1;
        const offsetY = snap ? this.grid.y : 1;
        if (selectedElementIds.length > 0) {
            if (this.matchesMoveUpKeystroke(event)) {
                return [move_handler_1.MoveElementAction.create(selectedElementIds, 0, -offsetY, snap)];
            }
            else if (this.matchesMoveDownKeystroke(event)) {
                return [move_handler_1.MoveElementAction.create(selectedElementIds, 0, offsetY, snap)];
            }
            else if (this.matchesMoveRightKeystroke(event)) {
                return [move_handler_1.MoveElementAction.create(selectedElementIds, offsetX, 0, snap)];
            }
            else if (this.matchesMoveLeftKeystroke(event)) {
                return [move_handler_1.MoveElementAction.create(selectedElementIds, -offsetX, 0, snap)];
            }
        }
        else {
            if (this.matchesMoveUpKeystroke(event)) {
                return [move_handler_1.MoveViewportAction.create(0, -offsetY)];
            }
            else if (this.matchesMoveDownKeystroke(event)) {
                return [move_handler_1.MoveViewportAction.create(0, offsetY)];
            }
            else if (this.matchesMoveRightKeystroke(event)) {
                return [move_handler_1.MoveViewportAction.create(offsetX, 0)];
            }
            else if (this.matchesMoveLeftKeystroke(event)) {
                return [move_handler_1.MoveViewportAction.create(-offsetX, 0)];
            }
        }
        return [];
    }
    matchesMoveUpKeystroke(event) {
        const unsnap = this.tool.changeBoundsManager.unsnapModifier();
        return (0, keyboard_1.matchesKeystroke)(event, 'ArrowUp') || (!!unsnap && (0, keyboard_1.matchesKeystroke)(event, 'ArrowUp', unsnap));
    }
    matchesMoveDownKeystroke(event) {
        const unsnap = this.tool.changeBoundsManager.unsnapModifier();
        return (0, keyboard_1.matchesKeystroke)(event, 'ArrowDown') || (!!unsnap && (0, keyboard_1.matchesKeystroke)(event, 'ArrowDown', unsnap));
    }
    matchesMoveRightKeystroke(event) {
        const unsnap = this.tool.changeBoundsManager.unsnapModifier();
        return (0, keyboard_1.matchesKeystroke)(event, 'ArrowRight') || (!!unsnap && (0, keyboard_1.matchesKeystroke)(event, 'ArrowRight', unsnap));
    }
    matchesMoveLeftKeystroke(event) {
        const unsnap = this.tool.changeBoundsManager.unsnapModifier();
        return (0, keyboard_1.matchesKeystroke)(event, 'ArrowLeft') || (!!unsnap && (0, keyboard_1.matchesKeystroke)(event, 'ArrowLeft', unsnap));
    }
}
exports.MoveKeyListener = MoveKeyListener;
// Default x distance used if grid is not provided
MoveKeyListener.defaultMoveX = 20;
// Default y distance used if grid is not provided
MoveKeyListener.defaultMoveY = 20;
//# sourceMappingURL=movement-key-tool.js.map