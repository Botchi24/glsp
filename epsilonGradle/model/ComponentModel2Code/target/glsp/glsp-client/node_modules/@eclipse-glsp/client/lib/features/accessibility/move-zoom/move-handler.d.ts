/********************************************************************************
 * Copyright (c) 2023-2024 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Action, ElementAndBounds, ElementMove, GModelRoot, IActionDispatcher, IActionHandler, ICommand, ISnapper, Point, SetViewportAction, Viewport } from '@eclipse-glsp/sprotty';
import { DebouncedFunc } from 'lodash';
import { EditorContextService } from '../../../base/editor-context-service';
import { IFeedbackActionDispatcher } from '../../../base/feedback/feedback-action-dispatcher';
import { FeedbackEmitter } from '../../../base/feedback/feedback-emitter';
import { SelectableBoundsAware } from '../../../utils/gmodel-util';
import { IMovementRestrictor } from '../../change-bounds/movement-restrictor';
/**
 * Action for triggering moving of the viewport.
 */
export interface MoveViewportAction extends Action {
    kind: typeof MoveViewportAction.KIND;
    /**
     * used to specify the amount to be moved in the x-axis
     */
    moveX: number;
    /**
     * used to specify the amount to be moved in the y-axis
     */
    moveY: number;
}
export declare namespace MoveViewportAction {
    const KIND = "moveViewportAction";
    function is(object: any): object is MoveViewportAction;
    function create(moveX: number, moveY: number): MoveViewportAction;
}
/**
 * Action for triggering moving of elements.
 */
export interface MoveElementAction extends Action {
    kind: typeof MoveElementAction.KIND;
    /**
     * used to specify the elements to be zoomed in/out
     */
    elementIds: string[];
    /**
     * used to specify the amount to be moved in the x-axis
     */
    moveX: number;
    /**
     * used to specify the amount to be moved in the y-axis
     */
    moveY: number;
    /**
     * used to specify whether we should snap to the grid
     */
    snap: boolean;
}
export declare namespace MoveElementAction {
    const KIND = "moveElementAction";
    function is(object: any): object is MoveElementAction;
    function create(elementIds: string[], moveX: number, moveY: number, snap?: boolean): MoveElementAction;
}
/**
 * Action handler for moving of the viewport.
 */
export declare class MoveViewportHandler implements IActionHandler {
    protected editorContextService: EditorContextService;
    protected dispatcher: IActionDispatcher;
    handle(action: Action): void | Action | ICommand;
    handleMoveViewport(action: MoveViewportAction): void;
    protected moveViewport(viewport: GModelRoot & Viewport, offsetX: number, offSetY: number): SetViewportAction;
}
/**
 * Action handler for moving elements.
 */
export declare class MoveElementHandler implements IActionHandler {
    protected editorContextService: EditorContextService;
    protected dispatcher: IActionDispatcher;
    protected feedbackDispatcher: IFeedbackActionDispatcher;
    readonly snapper?: ISnapper;
    readonly movementRestrictor?: IMovementRestrictor;
    protected debouncedChangeBounds?: DebouncedFunc<() => void>;
    protected moveFeedback: FeedbackEmitter;
    protected init(): void;
    handle(action: Action): void | Action | ICommand;
    handleMoveElement(action: MoveElementAction): void;
    protected getTargetBounds(element: SelectableBoundsAware, action: MoveElementAction): Point;
    protected scheduleChangeBounds(elementAndBounds: ElementAndBounds[]): void;
    protected toElementAndBounds(elementMoves: ElementMove[]): ElementAndBounds[];
}
//# sourceMappingURL=move-handler.d.ts.map