"use strict";
// *****************************************************************************
// Copyright (C) 2023 EclipseSource and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultBrowserFSInitialization = exports.BrowserFSInitialization = void 0;
const tslib_1 = require("tslib");
const inversify_1 = require("@theia/core/shared/inversify");
const browserfs_1 = require("browserfs");
exports.BrowserFSInitialization = Symbol('BrowserFSInitialization');
let DefaultBrowserFSInitialization = class DefaultBrowserFSInitialization {
    createMountableFileSystem() {
        return new Promise(resolve => {
            browserfs_1.FileSystem.IndexedDB.Create({}, (e, persistedFS) => {
                if (e) {
                    throw e;
                }
                if (!persistedFS) {
                    throw Error('Could not create filesystem');
                }
                browserfs_1.FileSystem.MountableFileSystem.Create({
                    '/home': persistedFS
                }, (error, mountableFS) => {
                    if (error) {
                        throw error;
                    }
                    if (!mountableFS) {
                        throw Error('Could not create filesystem');
                    }
                    (0, browserfs_1.initialize)(mountableFS);
                    resolve(mountableFS);
                });
            });
        });
    }
    async initializeFS(fs, provider) {
    }
};
DefaultBrowserFSInitialization = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], DefaultBrowserFSInitialization);
exports.DefaultBrowserFSInitialization = DefaultBrowserFSInitialization;
//# sourceMappingURL=browserfs-filesystem-initialization.js.map