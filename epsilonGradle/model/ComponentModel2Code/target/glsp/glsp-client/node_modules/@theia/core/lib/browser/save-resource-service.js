"use strict";
/********************************************************************************
 * Copyright (C) 2022 Arm and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaveResourceService = void 0;
const tslib_1 = require("tslib");
const inversify_1 = require("inversify");
const common_1 = require("../common");
const navigatable_types_1 = require("./navigatable-types");
const saveable_1 = require("./saveable");
let SaveResourceService = class SaveResourceService {
    /**
     * Indicate if the document can be saved ('Save' command should be disable if not).
     */
    canSave(widget) {
        return saveable_1.Saveable.isDirty(widget) && (this.canSaveNotSaveAs(widget) || this.canSaveAs(widget));
    }
    canSaveNotSaveAs(widget) {
        var _a;
        // By default, we never allow a document to be saved if it is untitled.
        return Boolean(widget && ((_a = navigatable_types_1.NavigatableWidget.getUri(widget)) === null || _a === void 0 ? void 0 : _a.scheme) !== common_1.UNTITLED_SCHEME);
    }
    /**
     * Saves the document
     *
     * No op if the widget is not saveable.
     */
    async save(widget, options) {
        if (this.canSaveNotSaveAs(widget)) {
            await saveable_1.Saveable.save(widget, options);
            return navigatable_types_1.NavigatableWidget.getUri(widget);
        }
        else if (this.canSaveAs(widget)) {
            return this.saveAs(widget, options);
        }
    }
    canSaveAs(saveable) {
        return false;
    }
    saveAs(sourceWidget, options) {
        return Promise.reject('Unsupported: The base SaveResourceService does not support saveAs action.');
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(common_1.MessageService),
    (0, tslib_1.__metadata)("design:type", common_1.MessageService)
], SaveResourceService.prototype, "messageService", void 0);
SaveResourceService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], SaveResourceService);
exports.SaveResourceService = SaveResourceService;
//# sourceMappingURL=save-resource-service.js.map