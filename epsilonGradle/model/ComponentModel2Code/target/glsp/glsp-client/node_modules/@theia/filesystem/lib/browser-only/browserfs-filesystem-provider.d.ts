import { FileChange, FileDeleteOptions, FileOpenOptions, FileOverwriteOptions, FileReadStreamOptions, FileSystemProviderCapabilities, FileSystemProviderWithFileReadWriteCapability, FileType, FileUpdateOptions, FileUpdateResult, FileWriteOptions, Stat, WatchOptions } from '../common/files';
import { Event, URI, Disposable, CancellationToken } from '@theia/core';
import { TextDocumentContentChangeEvent } from '@theia/core/shared/vscode-languageserver-protocol';
import { ReadableStreamEvents } from '@theia/core/lib/common/stream';
import type { FileSystem } from 'browserfs/dist/node/core/file_system';
import { BrowserFSInitialization } from './browserfs-filesystem-initialization';
export declare class BrowserFSFileSystemProvider implements FileSystemProviderWithFileReadWriteCapability {
    readonly initialization: BrowserFSInitialization;
    capabilities: FileSystemProviderCapabilities;
    onDidChangeCapabilities: Event<void>;
    onDidChangeFile: Event<readonly FileChange[]>;
    onFileWatchError: Event<void>;
    private mapHandleToPos;
    private writeHandles;
    private canFlush;
    private fs;
    private mountableFS;
    private initialized;
    constructor(initialization: BrowserFSInitialization);
    mount(mountPoint: string, fs: FileSystem): Promise<void>;
    watch(_resource: URI, _opts: WatchOptions): Disposable;
    stat(resource: URI): Promise<Stat>;
    mkdir(resource: URI): Promise<void>;
    readdir(resource: URI): Promise<[string, FileType][]>;
    delete(resource: URI, _opts: FileDeleteOptions): Promise<void>;
    rename(from: URI, to: URI, opts: FileOverwriteOptions): Promise<void>;
    copy?(from: URI, to: URI, opts: FileOverwriteOptions): Promise<void>;
    readFile(resource: URI): Promise<Uint8Array>;
    writeFile(resource: URI, content: Uint8Array, opts: FileWriteOptions): Promise<void>;
    readFileStream?(resource: URI, opts: FileReadStreamOptions, token: CancellationToken): ReadableStreamEvents<Uint8Array>;
    open(resource: URI, opts: FileOpenOptions): Promise<number>;
    close(fd: number): Promise<void>;
    read(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number>;
    write(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number>;
    private doWrite;
    private normalizePos;
    private updatePos;
    access?(resource: URI, mode?: number | undefined): Promise<void>;
    fsPath?(resource: URI): Promise<string>;
    updateFile?(resource: URI, changes: TextDocumentContentChangeEvent[], opts: FileUpdateOptions): Promise<FileUpdateResult>;
    private toFilePath;
    private toType;
    private promisify;
    private toFileSystemProviderError;
}
//# sourceMappingURL=browserfs-filesystem-provider.d.ts.map