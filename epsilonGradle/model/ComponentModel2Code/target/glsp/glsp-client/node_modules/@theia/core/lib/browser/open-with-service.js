"use strict";
// *****************************************************************************
// Copyright (C) 2024 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenWithService = void 0;
const tslib_1 = require("tslib");
const inversify_1 = require("inversify");
const disposable_1 = require("../common/disposable");
const nls_1 = require("../common/nls");
const quick_input_1 = require("./quick-input");
let OpenWithService = class OpenWithService {
    constructor() {
        this.handlers = [];
    }
    registerHandler(handler) {
        this.handlers.push(handler);
        return disposable_1.Disposable.create(() => {
            const index = this.handlers.indexOf(handler);
            if (index !== -1) {
                this.handlers.splice(index, 1);
            }
        });
    }
    async openWith(uri) {
        const handlers = this.getHandlers(uri);
        const result = await this.quickInputService.pick(handlers.map(handler => {
            var _a;
            return ({
                handler: handler,
                label: (_a = handler.label) !== null && _a !== void 0 ? _a : handler.id,
                detail: handler.providerName
            });
        }), {
            placeHolder: nls_1.nls.localizeByDefault("Select editor for '{0}'", uri.path.base)
        });
        if (result) {
            return result.handler.open(uri);
        }
    }
    getHandlers(uri) {
        const map = new Map(this.handlers.map(handler => [handler, handler.canHandle(uri)]));
        return this.handlers.filter(handler => map.get(handler) > 0).sort((a, b) => map.get(b) - map.get(a));
    }
};
(0, tslib_1.__decorate)([
    (0, inversify_1.inject)(quick_input_1.QuickInputService),
    (0, tslib_1.__metadata)("design:type", Object)
], OpenWithService.prototype, "quickInputService", void 0);
OpenWithService = (0, tslib_1.__decorate)([
    (0, inversify_1.injectable)()
], OpenWithService);
exports.OpenWithService = OpenWithService;
//# sourceMappingURL=open-with-service.js.map