configurations {
    epsilon
}

repositories {
    mavenCentral()
}

dependencies {
    epsilon 'org.eclipse.epsilon:org.eclipse.epsilon.workflow:2.5.0'
    epsilon 'org.eclipse.epsilon:org.eclipse.epsilon.workflow.emf:2.5.0'
    epsilon 'org.eclipse.epsilon:org.eclipse.epsilon.eunit.cmp.emf:2.5.0'
}

task setupEpsilonTasks {
    // Set up the core Epsilon tasks
    ant.taskdef(resource: 'org/eclipse/epsilon/workflow/tasks/tasks.xml', 
        classpath: configurations.epsilon.asPath, loaderref: 'epsilon')
    // Set up the Epsilon EMF tasks
    ant.taskdef(resource: 'org/eclipse/epsilon/workflow/tasks/emf/tasks.xml', 
        classpath: configurations.epsilon.asPath, loaderref: 'epsilon')
    // Set logging level to info so that EOL's println() is not suppressed
    ant.lifecycleLogLevel = 'INFO'
}

task register_metamodel {
	dependsOn tasks.setupEpsilonTasks
	ant.'epsilon.emf.loadModel'( name:          'metamodel', 
                                 modelfile:     dir_metamodel + 'statemachine.ecore',
                                 metamodelfile:	dir_metamodel + 'ecore.ecore',
                                 read:          "true",
                                 store:         "false")
}

task register_viewpointModel {
	dependsOn tasks.setupEpsilonTasks
	ant.'epsilon.emf.loadModel'( name:          'viewpointModel', 
                                 modelfile:     dir_model + 'viewpointModel.viewpointModel',
                                 metamodelfile:	dir_metamodel + 'viewpointModel.ecore',
                                 read:          "true",
                                 store:         "false")
}

task register_glspFeatureTree {
    dependsOn tasks.setupEpsilonTasks
    ant.'epsilon.xml.loadModel'( name:          'glspFeatureTree', 
                                 file:     		dir_model + 'GLSPFeatureTree2MetamodelSpecificFeatureTree/' + dir_source + 'GLSPFeatureTree.xml',
                                 read:          "true",
                                 store:         "false")

}

task register_metamodelSpecificFeatureTree {
    dependsOn tasks.setupEpsilonTasks
    ant.'epsilon.xml.loadModel'( name:          'metamodelSpecificFeatureTree', 
                                 file:     		dir_model + 'GLSPFeatureTree2MetamodelSpecificFeatureTree/' + dir_target + 'MetamodelSpecificFeatureTree.xml',
                                 read:          "false",
                                 store:         "true")

}

task transformFeatureTree {
    dependsOn register_metamodel, register_viewpointModel, register_glspFeatureTree, register_metamodelSpecificFeatureTree

    doFirst{
        ant.'epsilon.etl'(src: dir_script + "GLSPFeatureTree2MetamodelSpecificFeatureTree/GLSPFeatureTree2MetamodelSpecificFeatureTree.etl"){ 
		                  model(ref: "metamodel", alias: "metamodel")
		                  model(ref: "viewpointModel", alias: "viewpointModel")
                          model(ref: "glspFeatureTree", alias: "source")
                          model(ref: "metamodelSpecificFeatureTree", alias: "target")
            }
    }

    doLast{
		ant.'epsilon.disposeModel'(model: "metamodel")
		ant.'epsilon.disposeModel'(model: "viewpointModel")
        ant.'epsilon.disposeModel'(model: "glspFeatureTree")
        ant.'epsilon.disposeModel'(model: "metamodelSpecificFeatureTree")
    }

}